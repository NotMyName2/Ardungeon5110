
#ifndef myBitmapsHIncluded
#include "myBitmaps.h"
#endif

#ifndef myBitmapsCIncluded

  const uint8_t nudesMap[29*2] =
  {0, 0, 0, 38, 73, 73, 73, 50, 0, 127, 73, 73, 65, 65, 0, 127, 4, 8, 16, 127, 0, 127, 65, 65, 34, 28, 0, 0, 0,
    127, 4, 8, 16, 127, 0, 63, 64, 64, 64, 63, 0, 127, 65, 65, 34, 28, 0, 127, 73, 73, 65, 65, 0, 38, 73, 73, 73, 50,
};

  const uint8_t bowAndArrowMap[16*2] =
  {0b00000000, 0b10001110, 0b11100110, 0b00111010, 0b00011000, 0b00101100, 0b01000110, 0b10000110,
      0b10000110, 0b01000110, 0b00100110, 0b00010110, 0b00001110, 0b00000100, 0b00000000, 0b00000000,
   0b00000000, 0b00011111, 0b00111111, 0b00010000, 0b00001000, 0b00000100, 0b00000010, 0b00000001,
      0b00000001, 0b00000010, 0b00011100, 0b00101100, 0b01010100, 0b01101000, 0b00110000, 0b00000000};
/*
const uint8_t xichtmap[2*8]=
      {0b00000110, 0b00001111, 0b10011111, 0b11111110, 0b10010001, 0b00001001, 0b00000110, 0b00000000,
       0b00000110, 0b00001001, 0b00000111, 0b00001111, 0b00001001, 0b00000110, 0b00000000, 0b00000000};
*/
  const uint8_t playerMap[13*2] =
       {0b00000000, 0b00000000, 0b01000000, 0b01000000, 0b01001100, 0b01011110, 0b11111110, 0b01011110,
           0b01001100, 0b01000000, 0b01000000, 0b01000000, 0,
        0,0,0,0,0, 0b00011110, 0b00000001, 0b00011110, 0, 0, 0, 0, 0,};

   const uint8_t zomMap[13*2] =
 {
   0, 0, 0b10000000, 0b01001111, 0b11011101, 0b11110111, 0b11110111, 0b01001101, 0b01011110, 0b10000000, 0, 0, 0,
   0, 0b00000100, 0b00000011, 0, 0b00011110, 0b00000011, 0b00000011, 0b00000111, 0b00011000, 0b00000001, 0b00000010, 0b00000001, 0
};
   const uint8_t weakSkelMap[13*2] =
{
   0,0,0b11000000, 0b00100000, 0b01100110, 0b10101101, 0b11111111,  0b10101101, 0b01100110, 0b00100000, 0b11000000, 0,0,
   0, 0b00000011, 0, 0, 0b00000001, 0b00011110, 0b00000011,0b00011110, 0b00000001,  0, 0, 0b00000011, 0
};
   const uint8_t slimMap[13*2] =
{
  0b11110000, 0b11111100, 0b11111110, 0b11111111, 0b11101111, 0b11111111, 0b11111111, 0b11111111, 0b11110111, 0b11111110, 0b11111110, 0b11111000, 0b11100000,
  0b00000011, 0b00001111, 0b00011111, 0b00011111, 0b00011110, 0b00011101, 0b00011110, 0b00011101, 0b00011110, 0b00011111, 0b00001111, 0b00000111, 0b00000001
};

const uint8_t emptyMap[4*1] = {0b11001100, 0b00110011, 0b11001100, 0b00110011};
/*const uint8_t fullmap[4*8]= {0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00,
                             0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff,
                             0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00,
                             0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff};
                           */
/*const uint8_t xichtNaopak[2][8] =
                             {
                               {0b00000110, 0b00001111, 0b10011111, 0b11111110, 0b10010001, 0b00001001, 0b00000110, 0b00000000},
                               {0b00000110, 0b00001001, 0b00000111, 0b00001111, 0b00001001, 0b00000110, 0b00000000, 0b00000000}

                             };
                             */
   const uint8_t crossOofMap[5*1] = {0b00010101, 0b00001010, 0b00000100, 0b00001010, 0b00010101};

/*const uint8_t veryBigMap[100*7] =
                               {0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                               0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111,
                             0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111};
*/

const uint8_t gridMap[64*6] = {
  0b11111111,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0b11111111,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0b11111111,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0b11111111,0,0,0,
0b11111111,128,128,128,128,128,128,128, 128,128,128,128,128,128,128,128, 128,128,128,128,0b11111111,128,128,128, 128,128,128,128,128,128,128,128, 128,128,128,128,128,128,128,128, 0b11111111,128,128,128,128,128,128,128, 128,128,128,128,128,128,128,128, 128,128,128,128,0b11111111,0,0,0,
0b11111111,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0, 0,0,0,0 ,0b11111111,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0, 0,0,0,0, 0b11111111,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0, 0,0,0,0,0b11111111,0,0,0,
0b11111111,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128, 128, 128, 128, 128, 0b11111111,128,128,128,128,128,128,128 ,128,128,128,128,128,128,128,128, 128,128,128,128 ,0b11111111,128,128,128,128,128,128,128 ,128,128,128,128,128,128,128,128, 128,128,128,128,0b11111111,0,0,0,
0b11111111,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0b11111111,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0b11111111,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0, 0,0,0,0,0b11111111,0,0,0,
0b11111111,128,64,32,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0, 0, 0,0b11111111,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0 ,0b11111111,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0, 0,0,0,0,0b11111111
                             };

 const uint8_t numbers[10][3*1]=
{
  {0b00011111, 0b00010001, 0b00011111},
  {0b00000010, 0b00011111, 0},
  {0b00011101, 0b00010101, 0b00010111},
  {0b00010001, 0b00010101, 0b00011111},
  {0b00000111, 0b00000100, 0b00011110},
  {0b00010111, 0b00010101, 0b00011101},
  {0b00011111, 0b00010101, 0b00011101},
  {0b00000001, 0b00011001, 0b00000111},
  {0b00011111, 0b00010101, 0b00011111},
  {0b00010111, 0b00010101, 0b00011111}
};
#define myBitmapsCIncluded
#endif
